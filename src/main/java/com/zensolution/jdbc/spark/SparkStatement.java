package com.zensolution.jdbc.spark;

import com.zensolution.jdbc.spark.internal.SparkService;
import com.zensolution.jdbc.spark.jdbc.AbstractJdbcStatement;
import org.apache.spark.sql.catalyst.parser.ParseException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;

public class SparkStatement extends AbstractJdbcStatement {

    private static final Logger logger = LoggerFactory.getLogger(SparkResultSet.class);

    /**
     * Stores whether this Statement is closed or not
     */
    private boolean closed = false;

    private SparkConnection connection;
    private SparkService sparkService;
    private int fetchSize = 1;
    private int fetchDirection = ResultSet.FETCH_FORWARD;
    private int maxRows = 0;
    private SparkResultSet resultSet;

    protected SparkStatement(SparkConnection connection, SparkService sparkService) {
        this.connection = connection;
        this.sparkService = sparkService;
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        checkOpen();
        try {
            logger.info("SparkStatement:executeQuery() - sql=" + sql);
            resultSet = new SparkResultSet(connection.getConnectionInfo(), sql, sparkService);
            return resultSet;
        } catch (Exception e) {
            throw new SQLException(e);
        }
    }

    @Override
    public void close() throws SQLException {
        this.closed = true;
    }

    @Override
    public int getMaxRows() throws SQLException {
        return maxRows;
    }

    @Override
    public void setMaxRows(int max) throws SQLException {
        checkOpen();
        maxRows = max;
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        checkOpen();
        try {
            logger.info("SparkStatement:execute() - sql=" + sql);
            resultSet = new SparkResultSet(connection.getConnectionInfo(), sql, sparkService);
        } catch (ParseException e) {
            throw new SQLException(e);
        }
        return true;
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        checkOpen();
        return resultSet;
    }

    @Override
    public int getUpdateCount() throws SQLException {
        return resultSet.getCount();
    }

    @Override
    public int getFetchDirection() throws SQLException {
        return 0;
    }

    @Override
    public Connection getConnection() throws SQLException {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean getMoreResults(int current) throws SQLException {
        return false;
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        return false;
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        return false;
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        return false;
    }

    @Override
    public boolean isClosed() throws SQLException {
        return false;
    }

    @Override
    public boolean isPoolable() throws SQLException {
        return false;
    }

    @Override
    public void closeOnCompletion() throws SQLException {

    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        return false;
    }

    protected void checkOpen() throws SQLException {
        if (closed) {
            throw new SQLException("Statement closed");
        }
    }
}
